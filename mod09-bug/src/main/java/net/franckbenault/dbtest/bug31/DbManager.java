package net.franckbenault.dbtest.bug31;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;




import javax.sql.DataSource;

import org.h2.jdbcx.JdbcDataSource;



public class DbManager {
	
    private String requestCreateTablesBuilding = 
    		//"drop table buildings if exists;"+
    		"create table buildings (id bigint generated by default as identity, name varchar(255) not null, bldgNr bigint, primary key (id));";
    private String requestBuilding = "INSERT INTO buildings(name, bldgNr) VALUES('bella bentona',120)";
		 
		/** Service Connection. */
		private JdbcDataSource dataSource;
		private Connection connection;
	
	 
		/** driver JDBC. */
		private String jdbcDriver = "org.h2.Driver";
	 
		/** memory mode. */
		private String database = "jdbc:h2:mem:test";
	 
		/** user for DB connection. */
		private String user = "sa";
	 
		/** password for DB connection */
		private String password = "";
	 
		/**
		 * Function connection to the database.
		 */
		public void connexionDB() {
			try {
				// loading the JDBC driver for HSQLDB
				Class.forName(jdbcDriver).newInstance();
			} catch (InstantiationException e) {
				System.out.println("ERROR: failed to load JDBC driver.");
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			}
	 
			try {
				dataSource = new JdbcDataSource();
				
				dataSource.setURL(database);
				dataSource.setUser("sa");
				dataSource.setPassword("");
		
				connection = 
						dataSource.getConnection(); //"jdbc:h2:mem:test", "sa", "");
				
		
				executUpdate(requestCreateTablesBuilding);
				executUpdate(requestBuilding);

			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		public Connection getConnection() {
		      return connection;     
		}
		
		public DataSource getDataSource() {
		      return dataSource;
		}
		
		public ResultSet executRequest(String requete) throws SQLException {
			Statement statement;
			statement = connection.createStatement();
			ResultSet resultat = statement.executeQuery(requete);
			return resultat;
		}

		public int executUpdate(String requete) throws SQLException {
			Statement statement;
			statement = connection.createStatement();
			int resultat = statement.executeUpdate(requete);
			return resultat;
		}
		
		/**
		 * stop correctly HSQLDB.
		 * @throws SQLException SQL exception
		 */
		public void stopDB() throws SQLException {
			Statement st = connection.createStatement();
	 
			// send the order to stop correctly HSQLDB
			st.execute("SHUTDOWN");
			// close the connection
			connection.close();
	 
		}
}
